name: "Destroy New Customer IaC Deployment"

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        description: 'Enter Customer Name'
        default: 'automation'
        required: true

      vpc-cidr:
        description: 'Enter the VPC CIDR'
        default: '10.1.0.0/24'
        required: true

      region:
        description: 'Enter the Region for Deployment'
        default: 'us-east-1'
        required: true

      public_key:
        description: 'Enter MongoDB Public Key'
        required: true

      private_key:
        description: 'Enter MongoDB Private Key '
        required: true
  
      public_subnet-1:
        description: 'Enter the CIDRs for Public Subnet 1'
        default: '10.1.0.0/26'
        required: true

      public_subnet-2:
        description: 'Enter the CIDRs for Public Subnet 2'
        default: '10.1.0.64/26'
        required: true

      private_subnet-1:
        description: 'Enter the CIDRs for Private Subnet 1'
        default: '10.1.0.128/26'
        required: true

      private_subnet-2:
        description: 'Enter the CIDRs for Private Subnet 2'
        default: '10.1.0.192/26'
        required: true

      Vultara_Stack_Name: 
        description: 'Please enter Vultara and Authentication server stack names as this sequence: vultaraStack \n authStack'
        required: true
        
      SOC_Stack_Name: #If the user not using the SOC app, ignore this box.
        description: 'Please enter SOC stack name SOC Stack name, Let It Empty if SOC not used'
        
      destroy_region:
        description: 'Enter the Region for destroying'
        required: true

jobs:
  destroy-stack:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }} # Replace with your AWS region

      - name: Delete SOC Serverless Stack
        run: |
          if [ -n "${{ github.event.inputs.SOC_Stack_Name }}" ]; then
              echo "Start deletion Stack"
              aws cloudformation delete-stack --stack-name ${{ github.event.inputs.SOC_Stack_Name }}
          else
              echo "The user not using SOC App" 
          fi
          
      - name: Delete Vultara and Authentication Serverless Stack
        run: |
            echo -e "${{ github.event.inputs.Vultara_Stack_Name }}" > stackNames.txt
            vultara=$(sed -n '1p' stackNames.txt)
            auth=$(sed -n '2p' stackNames.txt)
            echo "Start deletion Stacks"
            aws cloudformation delete-stack --stack-name $vultara 
            aws cloudformation delete-stack --stack-name $auth
          
            echo "Wait until the deletion"
            aws cloudformation wait stack-delete-complete --stack-name $vultara
            aws cloudformation wait stack-delete-complete --stack-name $auth
            aws cloudformation wait stack-delete-complete --stack-name ${{ github.event.inputs.SOC_Stack_Name }}
        continue-on-error: true

      
  terraform:
    name: "Terraform"
    needs: destroy-stack
    if: ${{ always() }}  # to delete resources in case of failure
    runs-on: ubuntu-latest
    environment:
      name: Dev
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: init
        run: |
          cd primary_services_code
          terraform init -reconfigure -backend-config="bucket=vultara-terraform.tfstate-bucket" -backend-config="key=${{ github.event.inputs.name }}" -backend-config="region=us-east-1"
          
    
      - name: Terraform Destroy
        run: |
          cd primary_services_code
          terraform destroy -auto-approve -var="CUSTOMER_NAME=${{ github.event.inputs.name }}" -var="cidr=${{ github.event.inputs.vpc-cidr }}" -var="region=${{ github.event.inputs.region }}" -var="public_key=${{ github.event.inputs.public_key }}" -var="private_key=${{ github.event.inputs.private_key }}" -var="public_subnet_1=${{ github.event.inputs.public_subnet-1 }}" -var="public_subnet_2=${{ github.event.inputs.public_subnet-2 }}" -var="private_subnet_1=${{ github.event.inputs.private_subnet-1 }}" -var="private_subnet_2=${{ github.event.inputs.private_subnet-2 }}"
    
