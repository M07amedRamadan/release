# This is a basic workflow that is manually triggered

name: 0_New version and deploy

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Type of new version (major / minor / patch)'
        # Input has to be provided for the workflow to run
        required: true
        type: choice
        options: 
        - patch
        - minor
        - major

      DeployTo:
        # Friendly description to be shown in the UI.
        description: 'Which environment do you want to deploy, default Trial and Production'
        required: true
        type: choice
        default: 'Both'
        options: 
        - Both
        - Production_Only
        - Trial_Only
        - None

      release_notes:
        description: 'Release Notes'
        # default: 'Notes'
        
# A workflow run comprises one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "bump-version"
 bump-version:
  runs-on: ubuntu-latest

  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
         token: ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}

    - name: Authenticate GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}

    - name: Initialize mandatory git config
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email $git_email
      env:
        git_email: "${{ github.actor }}@vultara.com"

    - name: Bump version
      run: |
        npm version ${{ github.event.inputs.version }} --tag-version-prefix=""
        
    - name: Push latest version
      run: |
        git push origin main --follow-tags 

    - name: Extract version from branch name (for release branches)
      run: |
          new_version=$(npm version patch --tag-version-prefix="" )
          echo "RELEASE_VERSION=$new_version" >> $GITHUB_ENV

    - name: Generate release notes
      run: |
        echo -e "${{ github.event.inputs.release_notes }}" > release_notes.txt
        git log $(git describe --tags --abbrev=0)..HEAD --oneline --decorate >> release_notes.txt
        
    - name: Create a new release
      run: |
        gh release create v${{ env.RELEASE_VERSION }} -t "Release v${{ env.RELEASE_VERSION }}" -F release_notes.txt

    - name: Deploy Release to both environment Trial and Production
      run: |
        echo "environment=${{ github.event.inputs.DeployTo }}" >> $GITHUB_ENV
    
    - name: Merge pre-master to prod_branch
      id: production_merge
      if: env.environment == 'Both' || env.environment == 'Production_Only'
      run: |
          gh pr create --base prod_branch --head main --title "Merge pre-master into production" --body "Merging changes from  pre-master into production"
          pr_url=$(gh pr list --base prod_branch --head main --json number --jq '.[0].url')
          pr_number=$(basename "${pr_url}")
          release_notes="${{ github.event.inputs.release_notes }}"
          if [ -n "$release_notes" ]; then
            release_notes=$(echo -e "$release_notes")
            gh pr comment $pr_number --body "$release_notes"
          fi 
          gh pr review $pr_url --request-changes --body "Please address the following issues..."
          gh pr review $pr_url --approve
          gh pr merge $pr_url --merge
          
    # - name: Merge pre-master to master
    #   if: env.environment == 'Both' || env.environment == 'Trial_Only'
    #   run: |
    #       gh pr create --base master --head pre-master --title "Merge pre-master into Trial" --body "Merging changes from  pre-master into trial"
    #       pr_url=$(gh pr list --base master --head pre-master --json number --jq '.[0].url')
    #       pr_number=$(basename "${pr_url}")
    #       gh pr comment ${pr_number} --body "comment:${{ github.event.inputs.release_notes }}"
    #       gh pr merge $pr_url --merge
          
    # - name: Merge prod_branch back to pre-master branch.
    #   if: steps.production_merge.outcome == 'success'
    #   run: |
    #       gh pr create --base main --head prob_branch --title "Merge prod_brnach into main" --body "Merging changes from  prob_branch back to main"
    #       pr_url=$(gh pr list --base main --head prob_branch --json number --jq '.[0].url')
    #       gh pr review $pr_url --approve
    #       gh pr merge $pr_url --merge
    
    # - name: Send a notification about the failure.
    #   if: failure()
    #   run:  aws sns publish --topic-arn "arn:aws:sns:us-east-1:837491041518:cloudMonitoring" --message "The workflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}" --subject "Release Workflow Status"
    
