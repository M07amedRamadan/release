
# This is a basic workflow that is manually triggered

name: 0_New version and deploy

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Type of new version (major / minor / patch)'
        # Input has to be provided for the workflow to run
        required: true
        type: choice
        options: 
        - patch
        - minor
        - major

      DeployTo:
        # Friendly description to be shown in the UI.
        description: 'Which environment do you want to deploy, default Trial and Production'
        required: true
        type: choice
        default: 'Both'
        options: 
        - Both
        - Production_Only
        - Trial_Only
        - None

      release_notes:
        description: 'Release Notes'
        # default: 'Notes'
        
# A workflow run comprises one or more jobs that can run sequentially or in parallel.

jobs:
  # This workflow contains a single job called "bump-version"
 bump-version:
  runs-on: ubuntu-latest
  permissions:
      deployments: write
      contents: write
      statuses: write
      
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
         token: ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}
         fetch-depth: 0 

    - name: Authenticate GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}

    - name: Initialize mandatory git config
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email $git_email
      env:
        git_email: "${{ github.actor }}@vultara.com"

    - name: Bump version
      run: |
        npm version ${{ github.event.inputs.version }} --tag-version-prefix=""
        
    - name: Push latest version
      run: |
        git push origin main --follow-tags 
                
    - name: Extract version from branch name (for release branches)
      run: |
          RELEASE_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          echo "The latest tag is: $RELEASE_VERSION"

    - name: Create Release Notes
      id: create_release
      uses: actions/github-script@v7
      with:
          github-token: ${{secrets.VERSION_UPDATE_WORKFLOW_TOKEN}}
          script: |
            await github.request(`POST /repos/${{ github.repository }}/releases`, {
              tag_name: "${{ env.RELEASE_VERSION }}",
              name: "v${{ env.RELEASE_VERSION }} release",
              generate_release_notes: true
            });

    - name: Update Release Notes
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}
        script: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.RELEASE_VERSION }} | jq -r '.id')          echo "release ID is: $releasedId"
          echo "release ID is: $release_id"
          const { data: release } = await github.request(`GET /repos/${{ github.repository }}/releases/${release_id}`);
          const existingNotes = release.body || '';
          const newNotes = '${{ github.event.inputs.release_notes }}';
          
          const updatedNotes = `${existingNotes}\n\n${newNotes}`;
          
          await github.request(`PATCH /repos/${{ github.repository }}/releases/${release_id}`, {
            body: updatedNotes
          });


    # - name: update release notes
    #   run: |
    #       gh release edit ${{ env.RELEASE_VERSION }} --notes "${{ github.event.inputs.release_notes }}"
            
    # - name: update Notes to Existing Release
    #   uses: actions/github-script@v3
    #   with:
    #     github-token: ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}
    #     script: |
    #       const releaseId = "${{ env.RELEASE_VERSION }}"; // Specify the release ID of the release you want to update
    #       const additionalNotes = "${{ github.event.inputs.release_notes }}"; // Get additional notes input from the workflow
          
    #       const response = await github.repos.updateRelease({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         release_id: releaseId,
    #         body: {
    #           body: `${additionalNotes}`
    #         }
    #       });
    
    # - name: Generate release notes
    #   run: |
    #     echo -e "${{ github.event.inputs.release_notes }}" > release_notes.txt
    #     PREVIOUS_TAG=$(curl -s -H "Authorization: token ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
    #     echo "Generating release notes for tag: $PREVIOUS_TAG"
    #     git log ${PREVIOUS_TAG}..HEAD --oneline --decorate >> release_notes.txt
    #     cat release_notes.txt
        
    # - name: Create a new release
    #   run: |
    #     gh release create ${{ env.RELEASE_VERSION }} -t "Release v${{ env.RELEASE_VERSION }}" -F release_notes.txt

    - name: Deploy Release to both environment Trial and Production
      run: |
        echo "environment=${{ github.event.inputs.DeployTo }}" >> $GITHUB_ENV
        
    - name: Check for Conflicts
      id: check_conflicts
      run: |
          git rebase origin/prod_branch || true
          conflicts=$(git ls-files -u)
          echo "Conflicts detected: $conflicts"
          echo "::set-output name=has_conflicts::$(test -n "$conflicts" && echo true || echo false)"

    # - name: Resolve Conflicts Automatically
    #   if: steps.check_conflicts.outputs.has_conflicts == 'true'
    #   run: |

    #       conflicted_files=$(git diff --name-only --diff-filter=U)
    #       echo "Conflicted files: $conflicted_files"

    #       # Resolve conflicts
    #       for file in $conflicted_files; do
    #         git add $file
    #         git commit -m "$file is committed from conflict"
    #       done
    #       git rebase --continue
    #       git push --force-with-lease
   
    - name: Merge pre-master to prod_branch
      id: production-merge
      if: env.environment == 'Both' || env.environment == 'Production_Only'
      run: |
          gh pr create --base prod_branch --head main --title "Merge main into prod_branch" --body "Merging changes from  main into prod_branch"
          pr_number=$(gh pr list --base prod_branch --head main --json number --jq '.[0].number')
          release_notes="${{ github.event.inputs.release_notes }}"
          if [ -n "$release_notes" ]; then
            release_notes=$(echo -e "$release_notes")
            gh pr comment $pr_number --body "$release_notes"
          fi 
          echo "has_conflicts: ${{steps.check_conflicts.outputs.has_conflicts}}"
          if [ "${{ steps.check_conflicts.outputs.has_conflicts }}" == 'false' ]; then
            gh pr merge ${pr_number} --merge --admin > merge_output.txt
            echo "merge_success=true" >> $GITHUB_ENV
          else
            gh pr comment ${pr_number} --body "@M07amedRamadan the prod_branch has conflict with pre-master"
          fi
          
    # - name: Merge prod_branch back to pre-master branch.
    #   if: env.merge_success == 'true'
    #   run: |
    #         gh pr create --base main --head prob_branch --title "Merge prod_brnach into main" --body "Merging changes from  prob_branch back to main"
    #         pr_url=$(gh pr list --base main --head prob_branch --json number --jq '.[0].url')
    #         gh pr merge $pr_url --merge --admin
          
    # - name: Send a notification about the failure.
    #   if: failure()
    #   run:  aws sns publish --topic-arn "arn:aws:sns:us-east-1:837491041518:cloudMonitoring" --message "The workflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}" --subject "Release Workflow Status"
    
