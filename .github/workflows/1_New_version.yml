# This is a basic workflow that is manually triggered

name: 0_New version and deploy

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Type of new version (major / minor / patch)'
        # Input has to be provided for the workflow to run
        required: true
        type: choice
        options: 
        - patch
        - minor
        - major

      # DeployTo:
      #   # Friendly description to be shown in the UI.
      #   description: 'Which environment you want to deploy, default Trial and Production'
      #   required: true
      #   type: choice
      #   default: 'Both'
      #   options: 
      #   - Both
      #   - Production_Only
      #   - Trial_Only
      #   - None

      # release_notes:
      #   description: 'Release Notes'
      #   default: 'Notes'
        
# A workflow run comprises one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "bump-version"
 bump-version:
  runs-on: ubuntu-latest

  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
         token: ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}
         
    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Authenticate GitHub CLI
      run: gh auth login --with-token <<< ${{ secrets.VERSION_UPDATE_WORKFLOW_TOKEN }}

    - name: Initialize mandatory git config
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email $git_email
      env:
        git_email: "${{ github.actor }}@vultara.com"

    - name: Bump version
      id: version
      run: |
        npm version ${{ github.event.inputs.version }} --tag-version-prefix=""
        
    - name: Push latest version
      run: |
        git push origin main --follow-tags 

    - name: Extract version from branch name (for release branches)
      run: |
          new_version=$(npm version patch --tag-version-prefix="" )
          echo "RELEASE_VERSION=$new_version" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$new_version"

    - name: Create Release Notes
      uses: actions/github-script@v7
      with:
          github-token: ${{secrets.VERSION_UPDATE_WORKFLOW_TOKEN}}
          script: |
            await github.request(`POST /repos/${{ github.repository }}/releases`, {
              tag_name: "${{ github.ref }}",
              name: "v${{ env.RELEASE_VERSION }} release",
              generate_release_notes: true
            });

            
    # - name: Deploy Release to both environment 'Trial and Production'
    #   run: |
    #     echo "environment=${{ github.event.inputs.DeployTo }}" >> $GITHUB_ENV
    
    # # - name: Trigger Both Environments.
    #   if: env.environment == 'Both'
    #   run: |
    #     gh workflow run production.yml
    #     gh workflow run trial.yml

    # - name: Trigger Production Workflow
    #   if: env.environment == 'Production_Only'
    #   run: gh workflow run production.yml

    # - name: Trigger Trial Workflow
    #   if: env.environment == 'Trial_Only'
    #   run: gh workflow run trial.yml

    # - name: Merge prod_branch back to pre-master branch.
    #   if: success()
    #   run: |
    #      gh pr create --base pre-master --head prod_branch --title "Merge production into pre-master" --body "Merging changes from production into pre-master"
    #      pr_url=$(gh pr list --base pre-master --head prod_branch --json number --jq '.[0].url')
    #      gh pr merge $pr_url --merge
    
    # - name: Send notification at the failure.
    #   if: failure()
    #   run:  aws sns publish --topic-arn "arn:aws:sns:us-east-1:837491041518:cloudMonitoring" --message "The workflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}" --subject "Release Workflow Status"

    # - name: Add comment to PR using GH-cli
    #   run: |
    #     pr_url=$(gh pr list --base prod_branch --head main --json url --jq '.[0].url')
    #     pr_number=$(basename "${pr_url}")
    #     echo "PR Number: ${pr_number}"
    #     gh pr comment ${pr_number} --body "New Comment"
